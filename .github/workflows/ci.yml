name: MERN CI  # ðŸ‘ˆ Workflow name shown in GitHub Actions tab

on:
  push:
    branches: [main]  # ðŸ‘ˆ Triggers workflow whenever code is pushed to 'main' branch

jobs:
  mongo-init-test:  # ðŸ‘ˆ Defines a single job named 'mongo-init-test'
    runs-on: ubuntu-latest  # ðŸ‘ˆ Uses latest Ubuntu runner as virtual environment
    
    env:
      PORT: ${{ secrets.PORT }}  # ðŸ‘ˆ Loads environment variables securely from GitHub Secrets
      MONGO_URI: ${{ secrets.MONGO_URI }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}

    services:
      mongo:  # ðŸ‘ˆ Declares a MongoDB service container
        image: mongo  # ðŸ‘ˆ Uses official MongoDB Docker image
        ports: ['27017:27017']  # ðŸ‘ˆ Exposes MongoDB port for local access inside the job
    
    steps:
      - name: Checkout Repository  # ðŸ‘ˆ Step 1: Pulls your repo code into the runner
        uses: actions/checkout@v5  # ðŸ‘ˆ Official GitHub Action for checking out code

      - name: Setup Node.js  # ðŸ‘ˆ Step 2: Prepares Node.js environment
        uses: actions/setup-node@v3  # ðŸ‘ˆ Official Node setup action
        with: 
          node-version: '18'  # ðŸ‘ˆ Specifies Node.js version to use

      - name: Waiting for MongoDB to be ready  # ðŸ‘ˆ Step 3: Ensures MongoDB container is fully running before use
        run: |  # ðŸ‘‡ Simple loop to check MongoDB readiness using netcat (nc)
          until nc -z localhost 27017; do
            echo "Waiting for MongoDB..."
            sleep 2
          done
          echo "MongoDB is up"

      - name: Seed MongoDB  # ðŸ‘ˆ Step 4: Prepares test data in MongoDB
        working-directory: ./backend  # ðŸ‘ˆ Changes directory to backend folder
        run: |  # ðŸ‘ˆ Installs backend dependencies and Runs custom seeding script to populate DB
          npm install
          node seedTasksData.js

      - name: Running Backend Tests  # ðŸ‘ˆ Step 5: Executes automated backend tests
        working-directory: ./backend
        run: npm test  # ðŸ‘ˆ Runs test scripts defined in package.json
